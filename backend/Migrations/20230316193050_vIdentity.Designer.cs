// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(BdreservationSalleContext))]
    [Migration("20230316193050_vIdentity")]
    partial class vIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SalleLaboratoireTypeActivite", b =>
                {
                    b.Property<int>("NoSalle")
                        .HasColumnType("int");

                    b.Property<string>("NomActivite")
                        .HasColumnType("varchar(20)");

                    b.HasKey("NoSalle", "NomActivite");

                    b.HasIndex("NomActivite");

                    b.ToTable("SalleLaboratoire_TypeActivite", (string)null);
                });

            modelBuilder.Entity("backend.Models.Administrateur", b =>
                {
                    b.Property<string>("Courriel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("courriel");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("matricule");

                    b.HasKey("Courriel");

                    b.ToTable("Administrateur", (string)null);
                });

            modelBuilder.Entity("backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("backend.Models.EtatInvitation", b =>
                {
                    b.Property<int>("IdEtatInvitation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEtatInvitation");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEtatInvitation"));

                    b.Property<string>("NomEtatInvitation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nomEtatInvitation");

                    b.HasKey("IdEtatInvitation");

                    b.ToTable("etatInvitation", (string)null);
                });

            modelBuilder.Entity("backend.Models.EtatReservation", b =>
                {
                    b.Property<int>("IdEtatReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEtatReservation");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEtatReservation"));

                    b.Property<string>("NomEtatReservation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nomEtatReservation");

                    b.HasKey("IdEtatReservation");

                    b.ToTable("etatReservation", (string)null);
                });

            modelBuilder.Entity("backend.Models.Invitation", b =>
                {
                    b.Property<int>("NoReservation")
                        .HasColumnType("int")
                        .HasColumnName("noReservation");

                    b.Property<string>("MembreCourriel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("membreCourriel");

                    b.Property<DateTime?>("DateReponse")
                        .HasColumnType("date")
                        .HasColumnName("dateReponse");

                    b.Property<int>("IdEtatInvitation")
                        .HasColumnType("int")
                        .HasColumnName("idEtatInvitation");

                    b.HasKey("NoReservation", "MembreCourriel");

                    b.HasIndex("IdEtatInvitation");

                    b.HasIndex("MembreCourriel");

                    b.ToTable("Invitation", (string)null);
                });

            modelBuilder.Entity("backend.Models.Membre", b =>
                {
                    b.Property<string>("Courriel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("courriel");

                    b.Property<string>("Adresse")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("adresse");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("codePostal");

                    b.Property<bool?>("EstActif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("estActif")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EtatModifierParAdministrateurCourriel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("etatModifierParAdministrateurCourriel");

                    b.Property<string>("Province")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("province");

                    b.Property<string>("Telephone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("telephone");

                    b.HasKey("Courriel");

                    b.HasIndex("EtatModifierParAdministrateurCourriel");

                    b.ToTable("Membre", (string)null);
                });

            modelBuilder.Entity("backend.Models.Personne", b =>
                {
                    b.Property<string>("Courriel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("courriel");


                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("prenom");

                    b.HasKey("Courriel");

                    b.ToTable("Personne", (string)null);
                });

            modelBuilder.Entity("backend.Models.Plainte", b =>
                {
                    b.Property<int>("NoReservation")
                        .HasColumnType("int")
                        .HasColumnName("noReservation");

                    b.Property<string>("MembreCourriel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("membreCourriel");

                    b.Property<string>("AdministrateurCourriel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("administrateurCourriel");

                    b.Property<DateTime>("DatePlainte")
                        .HasColumnType("date")
                        .HasColumnName("datePlainte");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.HasKey("NoReservation", "MembreCourriel");

                    b.HasIndex("AdministrateurCourriel");

                    b.HasIndex("MembreCourriel");

                    b.ToTable("Plainte", (string)null);
                });

            modelBuilder.Entity("backend.Models.Reservation", b =>
                {
                    b.Property<int>("NoReservation")
                        .HasColumnType("int")
                        .HasColumnName("noReservation");

                    b.Property<string>("CreerParMembreCourriel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("creerParMembreCourriel");

                    b.Property<DateTime>("DateHeureDebut")
                        .HasColumnType("datetime")
                        .HasColumnName("dateHeureDebut");

                    b.Property<DateTime>("DateHeureFin")
                        .HasColumnType("datetime")
                        .HasColumnName("dateHeureFin");

                    b.Property<int>("IdEtatReservation")
                        .HasColumnType("int")
                        .HasColumnName("idEtatReservation");

                    b.Property<int>("NoSalle")
                        .HasColumnType("int")
                        .HasColumnName("noSalle");

                    b.Property<string>("NomActivite")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nomActivite");

                    b.Property<DateTime?>("TraiterLe")
                        .HasColumnType("date")
                        .HasColumnName("traiterLe");

                    b.Property<string>("TraiterParAdministrateurCourriel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("traiterParAdministrateurCourriel");

                    b.HasKey("NoReservation");

                    b.HasIndex("CreerParMembreCourriel");

                    b.HasIndex("IdEtatReservation");

                    b.HasIndex("NoSalle");

                    b.HasIndex("NomActivite");

                    b.HasIndex("TraiterParAdministrateurCourriel");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("backend.Models.SalleLaboratoire", b =>
                {
                    b.Property<int>("NoSalle")
                        .HasColumnType("int")
                        .HasColumnName("noSalle");

                    b.Property<int?>("Capacite")
                        .HasColumnType("int")
                        .HasColumnName("capacite");

                    b.Property<string>("CreerParAdministrateurCourriel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("creerParAdministrateurCourriel");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("EstActif")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("estActif")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("NoSalle");

                    b.HasIndex("CreerParAdministrateurCourriel");

                    b.ToTable("SalleLaboratoire", (string)null);
                });

            modelBuilder.Entity("backend.Models.TypeActivite", b =>
                {
                    b.Property<string>("NomActivite")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nomActivite");

                    b.Property<string>("CreerParAdministrateurCourriel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("creerParAdministrateurCourriel");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<bool?>("EstActif")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("estActif")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("NomActivite");

                    b.HasIndex("CreerParAdministrateurCourriel");

                    b.ToTable("TypeActivite", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalleLaboratoireTypeActivite", b =>
                {
                    b.HasOne("backend.Models.SalleLaboratoire", null)
                        .WithMany()
                        .HasForeignKey("NoSalle")
                        .IsRequired()
                        .HasConstraintName("FK_SalleLaboratoire_TypeActivite_SalleLaboratoire");

                    b.HasOne("backend.Models.TypeActivite", null)
                        .WithMany()
                        .HasForeignKey("NomActivite")
                        .IsRequired()
                        .HasConstraintName("FK_SalleLaboratoire_TypeActivite_TypeActivite");
                });

            modelBuilder.Entity("backend.Models.Administrateur", b =>
                {
                    b.HasOne("backend.Models.Personne", "CourrielNavigation")
                        .WithOne("Administrateur")
                        .HasForeignKey("backend.Models.Administrateur", "Courriel")
                        .IsRequired()
                        .HasConstraintName("FK_Administrateur_Personne");

                    b.Navigation("CourrielNavigation");
                });

            modelBuilder.Entity("backend.Models.Invitation", b =>
                {
                    b.HasOne("backend.Models.EtatInvitation", "IdEtatInvitationNavigation")
                        .WithMany("Invitations")
                        .HasForeignKey("IdEtatInvitation")
                        .IsRequired()
                        .HasConstraintName("FK_Invitation_etatInvitation");

                    b.HasOne("backend.Models.Membre", "MembreCourrielNavigation")
                        .WithMany("Invitations")
                        .HasForeignKey("MembreCourriel")
                        .IsRequired()
                        .HasConstraintName("FK_Invitation_Membre");

                    b.HasOne("backend.Models.Reservation", "NoReservationNavigation")
                        .WithMany("Invitations")
                        .HasForeignKey("NoReservation")
                        .IsRequired()
                        .HasConstraintName("FK_Invitation_Reservation");

                    b.Navigation("IdEtatInvitationNavigation");

                    b.Navigation("MembreCourrielNavigation");

                    b.Navigation("NoReservationNavigation");
                });

            modelBuilder.Entity("backend.Models.Membre", b =>
                {
                    b.HasOne("backend.Models.Personne", "CourrielNavigation")
                        .WithOne("Membre")
                        .HasForeignKey("backend.Models.Membre", "Courriel")
                        .IsRequired()
                        .HasConstraintName("FK_Membre_Personne");

                    b.HasOne("backend.Models.Administrateur", "EtatModifierParAdministrateurCourrielNavigation")
                        .WithMany("Membres")
                        .HasForeignKey("EtatModifierParAdministrateurCourriel")
                        .HasConstraintName("FK_Membre_Administrateur");

                    b.Navigation("CourrielNavigation");

                    b.Navigation("EtatModifierParAdministrateurCourrielNavigation");
                });

            modelBuilder.Entity("backend.Models.Plainte", b =>
                {
                    b.HasOne("backend.Models.Administrateur", "AdministrateurCourrielNavigation")
                        .WithMany("Plaintes")
                        .HasForeignKey("AdministrateurCourriel")
                        .HasConstraintName("FK_Plainte_Administrateur");

                    b.HasOne("backend.Models.Membre", "MembreCourrielNavigation")
                        .WithMany("Plaintes")
                        .HasForeignKey("MembreCourriel")
                        .IsRequired()
                        .HasConstraintName("FK_Plainte_Membre");

                    b.HasOne("backend.Models.Reservation", "NoReservationNavigation")
                        .WithMany("Plaintes")
                        .HasForeignKey("NoReservation")
                        .IsRequired()
                        .HasConstraintName("FK_Plainte_Reservation");

                    b.Navigation("AdministrateurCourrielNavigation");

                    b.Navigation("MembreCourrielNavigation");

                    b.Navigation("NoReservationNavigation");
                });

            modelBuilder.Entity("backend.Models.Reservation", b =>
                {
                    b.HasOne("backend.Models.Membre", "CreerParMembreCourrielNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("CreerParMembreCourriel")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Membre");

                    b.HasOne("backend.Models.EtatReservation", "IdEtatReservationNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdEtatReservation")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_etatReservation");

                    b.HasOne("backend.Models.SalleLaboratoire", "NoSalleNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("NoSalle")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_SalleLaboratoire");

                    b.HasOne("backend.Models.TypeActivite", "NomActiviteNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("NomActivite")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_TypeActivite");

                    b.HasOne("backend.Models.Administrateur", "TraiterParAdministrateurCourrielNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("TraiterParAdministrateurCourriel")
                        .HasConstraintName("FK_Reservation_Administrateur");

                    b.Navigation("CreerParMembreCourrielNavigation");

                    b.Navigation("IdEtatReservationNavigation");

                    b.Navigation("NoSalleNavigation");

                    b.Navigation("NomActiviteNavigation");

                    b.Navigation("TraiterParAdministrateurCourrielNavigation");
                });

            modelBuilder.Entity("backend.Models.SalleLaboratoire", b =>
                {
                    b.HasOne("backend.Models.Administrateur", "CreerParAdministrateurCourrielNavigation")
                        .WithMany("SalleLaboratoires")
                        .HasForeignKey("CreerParAdministrateurCourriel")
                        .IsRequired()
                        .HasConstraintName("FK_SalleLaboratoire_Administrateur");

                    b.Navigation("CreerParAdministrateurCourrielNavigation");
                });

            modelBuilder.Entity("backend.Models.TypeActivite", b =>
                {
                    b.HasOne("backend.Models.Administrateur", "CreerParAdministrateurCourrielNavigation")
                        .WithMany("TypeActivites")
                        .HasForeignKey("CreerParAdministrateurCourriel")
                        .IsRequired()
                        .HasConstraintName("FK_TypeActivite_Administrateur");

                    b.Navigation("CreerParAdministrateurCourrielNavigation");
                });

            modelBuilder.Entity("backend.Models.Administrateur", b =>
                {
                    b.Navigation("Membres");

                    b.Navigation("Plaintes");

                    b.Navigation("Reservations");

                    b.Navigation("SalleLaboratoires");

                    b.Navigation("TypeActivites");
                });

            modelBuilder.Entity("backend.Models.EtatInvitation", b =>
                {
                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("backend.Models.EtatReservation", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("backend.Models.Membre", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Plaintes");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("backend.Models.Personne", b =>
                {
                    b.Navigation("Administrateur");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("backend.Models.Reservation", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Plaintes");
                });

            modelBuilder.Entity("backend.Models.SalleLaboratoire", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("backend.Models.TypeActivite", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
